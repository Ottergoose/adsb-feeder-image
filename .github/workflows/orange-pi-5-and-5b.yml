# Original: https://github.com/guysoft/OctoPi-Klipper-CustomPiOS/blob/6a88c12f562be4668e26fe89a445e761be1481ac/LICENSE
# License: GPL-3.0
name: Orange Pi 5 and 5B

on:
  push:
    branches:
    - '*'
  schedule:
  - cron: '28 3 * * *'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IMG_NAME: orangepi5
      BASE_ARCH: arm64
      VARIANT: armbian
      IMAGE_URL: https://redirect.armbian.com/orangepi5/Jammy_legacy
      MAGIC_PATH: "repository/src/image-armbian/orangepi5.img.xz"
    steps:
    - name: Install Dependencies
      run: |
        sudo apt update
        sudo apt install coreutils p7zip-full qemu-user-static

    - name: Checkout CustomPiOS
      uses: actions/checkout@v2
      with:
        repository: 'dirkhh/CustomPiOS'
        ref: 'addBtrfsSupport'
        path: CustomPiOS

    - name: Checkout Project Repository
      uses: actions/checkout@v2
      with:
        path: repository
        submodules: true

    - name: Download image
      run: |
        MAGIC_DIR=$(dirname "${MAGIC_PATH}")
        mkdir -p "${MAGIC_DIR}"
        wget -qO "${MAGIC_PATH}" "$IMAGE_URL"

    - name: Update CustomPiOS Paths
      run: |
        cd repository/src
        ../../CustomPiOS/src/update-custompios-paths

    - name: Build Image
      run: |
        sudo modprobe loop
        cd repository/src
        # if BASE_ARCH is set, add it to config
        if [ -n "${BASE_ARCH}" ]; then
          echo "export BASE_ARCH=${BASE_ARCH}" >> config
        fi
        sudo bash -x ./build_dist "${VARIANT}"

    - name: Release Image
      env:
        BASE_RELEASE_COMPRESS: no
      run: |
        cd repository/src
        # CUSTOM_PI_OS_PATH is needed, its set in build_dist. Setting here manually
        export CUSTOM_PI_OS_PATH="$(realpath ../../CustomPiOS/src/)"
        source config
        sudo --preserve-env ../../CustomPiOS/src/release "${VARIANT}"



    - name: Copy output and add timestamp
      id: copy
      run: |
        NOW="$(date +"%Y-%m-%d-%H%M")"
        find -name "*.img*" || true
        CURRENT_IMAGE_NAME="$(basename $MAGIC_PATH)"
        echo "${CURRENT_IMAGE_NAME}"
        IMAGE="${NOW}-${IMG_NAME}-adsblol.img"
        if [ "${VARIANT}" = "default" ]; then
          WORKSPACE="repository/src/workspace"
        else
          WORKSPACE="repository/src/workspace-${VARIANT}"
        fi
        sudo chmod 777 -R "$WORKSPACE"

        sudo chmod 777 .
        BUILT_IMAGE="$(find $WORKSPACE -name "*.img" | head -n 1)"
        mv -v "${BUILT_IMAGE}" "${IMAGE}"
        sudo chmod 777 "${IMAGE}"
        echo "::set-output name=image::${IMAGE}"


    - name: Compress img to img.xz
      id: compress
      run: |
        export IMAGE="${{ steps.copy.outputs.image }}"
        sudo xz -z -3 -T0 -e "${IMAGE}"
        ls -l "${IMAGE}.xz"
        echo "::set-output name=image::${IMAGE}.xz"

    # Upload to GitHub Releases
    - name: Upload to GitHub Releases
      if: github.event_name != 'pull_request'
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_GITHUB_TOKEN }}
      run: |
        set -ex
        if ! command -v github-release &> /dev/null
        then
            # what system are we? darwin_amd64, linux_amd64, etc.
            SYSTEM=$(uname -s | tr '[:upper:]' '[:lower:]')
            ARCH=$(uname -m | sed 's/x86_64/amd64/g' | sed 's/aarch64/arm64/g')
            if [ "$SYSTEM" == "darwin" ]; then
                ARCH="amd64"
            fi
            wget -O- "https://github.com/c4milo/github-release/releases/download/v1.1.0/github-release_v1.1.0_${SYSTEM}_${ARCH}.tar.gz" | tar -xz -C /usr/local/bin
            chmod +x /usr/local/bin/github-release
        fi
        #Â As release name, use the name of the image minus the .img.xz
        RELEASE_NAME=$(basename "${{ steps.compress.outputs.image }}" .img.xz)
        github-release ${{ github.repository }} \
          $RELEASE_NAME \
          main \
          "Releasing $IMG_NAME $VARIANT $RELEASE_NAME" \
          "*img.xz"
